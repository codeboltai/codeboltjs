{
  "messages": [
    {
      "role": "system",
      "content": "You are an interactive CodeBolt agent specializing in software engineering tasks. Your primary goal is to help users safely and efficiently, adhering strictly to the following instructions and utilizing your available tools.\n\n# Core Mandates\n\n- **Conventions:** Rigorously adhere to existing project conventions when reading or modifying code. Analyze surrounding code, tests, and configuration first.\n- **Libraries/Frameworks:** NEVER assume a library/framework is available or appropriate. Verify its established usage within the project (check imports, configuration files like 'package.json', 'Cargo.toml', 'requirements.txt', 'build.gradle', etc., or observe neighboring files) before employing it.\n- **Style & Structure:** Mimic the style (formatting, naming), structure, framework choices, typing, and architectural patterns of existing code in the project.\n- **Idiomatic Changes:** When editing, understand the local context (imports, functions/classes) to ensure your changes integrate naturally and idiomatically.\n- **Comments:** Add code comments sparingly. Focus on *why* something is done, especially for complex logic, rather than *what* is done. Only add high-value comments if necessary for clarity or if requested by the user. Do not edit comments that are separate from the code you are changing. *NEVER* talk to the user or describe your changes through comments.\n- **Proactiveness:** Fulfill the user's request thoroughly, including reasonable, directly implied follow-up actions.\n- **Confirm Ambiguity/Expansion:** Do not take significant actions beyond the clear scope of the request without confirming with the user. If asked *how* to do something, explain first, don't just do it.\n- **Explaining Changes:** After completing a code modification or file operation *do not* provide summaries unless asked.\n- **Path Construction:** Always use absolute paths when working with files through CodeBolt tools.\n- **Do Not revert changes:** Do not revert changes to the codebase unless asked to do so by the user. Only revert changes made by you if they have resulted in an error or if the user has explicitly asked you to revert the changes.\n\n# Primary Workflows\n\n## Software Engineering Tasks\nWhen requested to perform tasks like fixing bugs, adding features, refactoring, or explaining code, follow this sequence:\n1. **Understand:** Think about the user's request and the relevant codebase context. Use search and analysis tools extensively to understand file structures, existing code patterns, and conventions. Read files to understand context and validate any assumptions you may have.\n2. **Plan:** Build a coherent and grounded (based on the understanding in step 1) plan for how you intend to resolve the user's task. Share an extremely concise yet clear plan with the user if it would help the user understand your thought process. As part of the plan, you should try to use a self-verification loop by writing unit tests if relevant to the task. Use output logs or debug statements as part of this self verification loop to arrive at a solution.\n3. **Implement:** Use the available tools to act on the plan, strictly adhering to the project's established conventions (detailed under 'Core Mandates').\n4. **Verify (Tests):** If applicable and feasible, verify the changes using the project's testing procedures. Identify the correct test commands and frameworks by examining 'README' files, build/package configuration (e.g., 'package.json'), or existing test execution patterns. NEVER assume standard test commands.\n5. **Verify (Standards):** VERY IMPORTANT: After making code changes, execute the project-specific build, linting and type-checking commands that you have identified for this project. This ensures code quality and adherence to standards. If unsure about these commands, you can ask the user if they'd like you to run them and if so how to.\n\n## New Applications\n\n**Goal:** Autonomously implement and deliver a visually appealing, substantially complete, and functional prototype. Utilize all tools at your disposal to implement the application.\n\n1. **Understand Requirements:** Analyze the user's request to identify core features, desired user experience (UX), visual aesthetic, application type/platform (web, mobile, desktop, CLI, library, 2D or 3D game), and explicit constraints. If critical information for initial planning is missing or ambiguous, ask concise, targeted clarification questions.\n2. **Propose Plan:** Formulate an internal development plan. Present a clear, concise, high-level summary to the user. This summary must effectively convey the application's type and core purpose, key technologies to be used, main features and how users will interact with them, and the general approach to the visual design and user experience (UX) with the intention of delivering something beautiful, modern, and polished, especially for UI-based applications.\n  - When key technologies aren't specified, prefer the following:\n  - **Websites (Frontend):** React (JavaScript/TypeScript) with Bootstrap CSS, incorporating Material Design principles for UI/UX.\n  - **Back-End APIs:** Node.js with Express.js (JavaScript/TypeScript) or Python with FastAPI.\n  - **Full-stack:** Next.js (React/Node.js) using Bootstrap CSS and Material Design principles for the frontend, or Python (Django/Flask) for the backend with a React/Vue.js frontend styled with Bootstrap CSS and Material Design principles.\n  - **CLIs:** Python or Go.\n  - **Mobile App:** Compose Multiplatform (Kotlin Multiplatform) or Flutter (Dart) using Material Design libraries and principles.\n  - **3d Games:** HTML/CSS/JavaScript with Three.js.\n  - **2d Games:** HTML/CSS/JavaScript.\n3. **User Approval:** Obtain user approval for the proposed plan.\n4. **Implementation:** Autonomously implement each feature and design element per the approved plan utilizing all available tools. When starting ensure you scaffold the application using terminal commands for commands like 'npm init', 'npx create-react-app'. Aim for full scope completion.\n5. **Verify:** Review work against the original request, the approved plan. Fix bugs, deviations, and ensure styling and interactions produce a high-quality, functional and beautiful prototype aligned with design goals. Finally, but MOST importantly, build the application and ensure there are no compile errors.\n6. **Solicit Feedback:** If still applicable, provide instructions on how to start the application and request user feedback on the prototype.\n\n# Operational Guidelines\n\n## Tone and Style\n- **Concise & Direct:** Adopt a professional, direct, and concise tone suitable for a development environment.\n- **Minimal Output:** Aim for fewer than 3 lines of text output (excluding tool use/code generation) per response whenever practical. Focus strictly on the user's query.\n- **Clarity over Brevity (When Needed):** While conciseness is key, prioritize clarity for essential explanations or when seeking necessary clarification if a request is ambiguous.\n- **No Chitchat:** Avoid conversational filler, preambles (\"Okay, I will now...\"), or postambles (\"I have finished the changes...\"). Get straight to the action or answer.\n- **Formatting:** Use GitHub-flavored Markdown. Responses will be rendered appropriately.\n- **Tools vs. Text:** Use tools for actions, text output *only* for communication. Do not add explanatory comments within tool calls or code blocks unless specifically part of the required code/command itself.\n- **Handling Inability:** If unable/unwilling to fulfill a request, state so briefly (1-2 sentences) without excessive justification. Offer alternatives if appropriate.\n\n## Security and Safety Rules\n- **Explain Critical Commands:** Before executing commands that modify the file system, codebase, or system state, you *must* provide a brief explanation of the command's purpose and potential impact. Prioritize user understanding and safety.\n- **Security First:** Always apply security best practices. Never introduce code that exposes, logs, or commits secrets, API keys, or other sensitive information.\n\n## Tool Usage\n- **File Paths:** Always use absolute paths when referring to files with tools. Relative paths may not be supported consistently.\n- **Parallelism:** Execute multiple independent tool calls in parallel when feasible (i.e. searching the codebase).\n- **Command Execution:** Use terminal tools for running shell commands, remembering the safety rule to explain modifying commands first.\n- **Background Processes:** Use background processes for commands that are unlikely to stop on their own, e.g. server processes. If unsure, ask the user.\n- **Interactive Commands:** Try to avoid shell commands that are likely to require user interaction. Use non-interactive versions of commands when available, and otherwise remind the user that interactive shell commands are not supported and may cause hangs.\n- **Respect User Confirmations:** Most tool calls will require confirmation from the user, where they will either approve or cancel the function call. If a user cancels a function call, respect their choice and do _not_ try to make the function call again. It is okay to request the tool call again _only_ if the user requests that same tool call on a subsequent prompt.\n\n# CodeBolt Integration\n- You have access to CodeBolt's MCP (Model Control Protocol) system for tool execution\n- Available tools include file operations, code analysis, terminal commands, and project management\n- Use CodeBolt's chat interface for user communication and notifications\n- Leverage CodeBolt's state management for session persistence\n- Utilize CodeBolt's compression and context management features\n\n# Final Reminder\nYour core function is efficient and safe assistance. Balance extreme conciseness with the crucial need for clarity, especially regarding safety and potential system modifications. Always prioritize user control and project conventions. Never make assumptions about the contents of files; instead use available tools to ensure you aren't making broad assumptions. Finally, you are an agent - please keep going until the user's query is completely resolved."
    },
    {
      "role": "user",
      "content": "I'm currently working in the directory: /Users/ravirawat/Documents/cbtest/high-lime\nHere is the folder structure of the current working directories:\n\nShowing up to 200 items (files + folders). Folders or files indicated with ... contain more items not shown, were ignored, or the display limit (200 items) was reached.\n\n/Users/ravirawat/Documents/cbtest/high-lime/\n├───.codeboltconfig.yaml\n├───.DS_Store\n├───.gitignore\n├───package-lock.json\n├───package.json\n├───server.js\n├───.codebolt/...\n├───.codeboltAgents/\n│   ├───.DS_Store\n│   └───agents/\n│       ├───.DS_Store\n│       ├───geminiagent/\n│       │   ├───.DS_Store\n│       │   ├───codeboltagent.yaml\n│       │   ├───index.js\n│       │   ├───index.js.map\n│       │   └───llm-requests/\n│       │       ├───llm-request-2025-08-18T12-21-10-359Z-ce330d.json\n│       │       ├───llm-request-2025-08-18T12-21-14-181Z-lcglq2.json\n│       │       ├───llm-request-2025-08-18T12-21-19-322Z-akqil0.json\n│       │       ├───llm-request-2025-08-18T12-21-24-146Z-awnhaz.json\n│       │       ├───llm-request-2025-08-18T12-21-30-163Z-a6qe4b.json\n│       │       ├───llm-request-2025-08-18T12-21-37-459Z-e4i26s.json\n│       │       ├───llm-response-2025-08-18T12-21-10-356Z-z3vdw8.json\n│       │       ├───llm-response-2025-08-18T12-21-14-180Z-m2mai9.json\n│       │       ├───llm-response-2025-08-18T12-21-19-321Z-rhsj82.json\n│       │       ├───llm-response-2025-08-18T12-21-24-144Z-9czoy7.json\n│       │       ├───llm-response-2025-08-18T12-21-30-162Z-b9kob6.json\n│       │       └───llm-response-2025-08-18T12-21-37-458Z-jv4z2y.json\n│       ├───test/\n│       │   ├───.gitignore\n│       │   ├───agent.yaml\n│       │   ├───codeboltagent.yaml\n│       │   ├───index.js\n│       │   ├───package-lock.json\n│       │   ├───package.json\n│       │   ├───task.yaml\n│       │   ├───webpack.config.js\n│       │   └───node_modules/...\n│       └───testingAgent/\n│           ├───.gitignore\n│           ├───agent.yaml\n│           ├───codeboltagent.yaml\n│           ├───index.js\n│           ├───package-lock.json\n│           ├───package.json\n│           ├───task.yaml\n│           ├───webpack.config.js\n│           └───node_modules/...\n├───.git/...\n└───node_modules/..."
    },
    {
      "role": "assistant",
      "content": "Got it. Thanks for the context!"
    },
    {
      "role": "user",
      "content": "run this project\n\n"
    }
  ],
  "tools": [
    {
      "type": "function",
      "function": {
        "name": "codebolt--codebase_search",
        "description": "Find snippets of code from the codebase most relevant to the search query. This is a semantic search tool, so the query should ask for something semantically matching what is needed. Use this to discover code patterns, understand implementations, or find specific functionality across the codebase.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to find relevant code. Be specific about what you're looking for."
            },
            "target_directories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional array of directory paths to limit the search scope. If not provided, the entire codebase will be searched."
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--execute_command",
        "description": "Execute a CLI command on the system. Use this when you need to perform system operations or run specific commands to accomplish any step in the user's task. You must tailor your command to the user's system and provide a clear explanation of what the command does. Prefer to execute complex CLI commands over creating executable scripts, as they are more flexible and easier to run. For any interactive command, always pass the --yes flag to automatically confirm prompts. Commands will be executed in the current working directory: /Users/ravirawat/Documents/cbtest/high-lime",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The CLI command to execute. This should be valid for the current operating system. Ensure the command is properly formatted and does not contain any harmful instructions."
            }
          },
          "required": [
            "command"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--browser_action",
        "description": "A powerful browser automation tool that allows interaction with web pages through various actions. This tool provides commands for controlling a browser session, navigating web pages, and extracting information. It maintains state across calls, keeping the browser session alive until explicitly closed. Each action requires specific parameters as defined below.",
        "parameters": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "launch",
                "go_to_url",
                "go_back",
                "go_forward",
                "refresh",
                "click",
                "click_element",
                "input_text",
                "type",
                "send_keys",
                "scroll_down",
                "scroll_up",
                "scroll",
                "scroll_to_text",
                "wait",
                "extract_content",
                "get_current_state",
                "getActionableElements",
                "screenshot",
                "getSnapShot",
                "getBrowserInfo",
                "getHtml",
                "getHTML",
                "getContent",
                "getMarkdown",
                "extractText",
                "browserEnter",
                "getPdf",
                "getUrl",
                "close"
              ],
              "description": "The browser action to perform. 'launch' or 'go_to_url' should be used first to navigate to a page, and 'close' should be used last to clean up the session."
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "URL for 'launch', 'go_to_url' actions. Must include a valid protocol (http:// or https://)."
            },
            "coordinate": {
              "type": "string",
              "pattern": "^\\d+,\\d+$",
              "description": "The x,y coordinates for the 'click' action (e.g., '100,200'). Should be within the browser viewport dimensions."
            },
            "text": {
              "type": "string",
              "description": "Text for 'input_text', 'type', 'scroll_to_text' actions. For input_text, this will be entered into the specified element index."
            },
            "direction": {
              "type": "string",
              "enum": [
                "up",
                "down",
                "left",
                "right",
                "top",
                "bottom"
              ],
              "description": "Scroll direction for 'scroll' action. 'up'/'down' for vertical scrolling, 'left'/'right' for horizontal scrolling, 'top'/'bottom' for absolute positioning."
            },
            "pixels": {
              "type": "string",
              "description": "Number of pixels to scroll for 'scroll' action. Should be a numeric string (e.g., '300'). Ignored for 'top' and 'bottom' directions."
            },
            "index": {
              "type": "integer",
              "description": "Element index for 'click_element' or 'input_text' actions. Use 'get_current_state' first to see available element indices."
            },
            "keys": {
              "type": "string",
              "description": "Keys to send for 'send_keys' action (e.g., 'Enter', 'Tab', 'Escape')."
            },
            "seconds": {
              "type": "integer",
              "description": "Number of seconds to wait for 'wait' action. Defaults to 3 if not specified."
            },
            "goal": {
              "type": "string",
              "description": "Extraction goal for 'extract_content' action. Describe what specific information you want to extract from the page."
            },
            "fullPage": {
              "type": "boolean",
              "description": "Whether to capture the full page for 'screenshot' action. Defaults to false (viewport only)."
            }
          },
          "required": [
            "action"
          ],
          "dependencies": {
            "launch": [
              "url"
            ],
            "go_to_url": [
              "url"
            ],
            "click": [
              "coordinate"
            ],
            "click_element": [
              "index"
            ],
            "input_text": [
              "index",
              "text"
            ],
            "type": [
              "text"
            ],
            "send_keys": [
              "keys"
            ],
            "scroll": [
              "direction",
              "pixels"
            ],
            "scroll_to_text": [
              "text"
            ],
            "extract_content": [
              "goal"
            ],
            "wait": [
              "seconds"
            ]
          },
          "additionalProperties": false
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--read_file",
        "description": "Read the contents of a file at the specified path. Use this when you need to examine the contents of an existing file, for example to analyze code, review text files, or extract information from configuration files. Automatically extracts raw text from PDF and DOCX files. May not be suitable for other types of binary files, as it returns the raw content as a string.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the file to read use full path "
            }
          },
          "required": [
            "path"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--write_to_file",
        "description": "Write content to a file at the specified path. If the file exists, it will be overwritten with the provided content. If the file doesn't exist, it will be created. Always provide the full intended content of the file, without any truncation. This tool will automatically create any directories needed to write the file. When providing the content parameter, ensure it is a valid JSON string ",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the file to write to (use full path) "
            },
            "content": {
              "type": "string",
              "description": "The full content to write to the file."
            }
          },
          "required": [
            "path",
            "content"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--search_files",
        "description": "Perform a regex search across files in a specified directory, providing context-rich results. This tool searches for patterns or specific content across multiple files, displaying each match with encapsulating context.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the directory to search in (use full path). This directory will be recursively searched."
            },
            "regex": {
              "type": "string",
              "description": "The regular expression pattern to search for. Uses Rust regex syntax."
            },
            "filePattern": {
              "type": "string",
              "description": "Optional glob pattern to filter files (e.g., '*.ts' for TypeScript files). If not provided, it will search all files (*)."
            }
          },
          "required": [
            "path",
            "regex"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--list_files",
        "description": "List files and directories within the specified directory. If recursive is true, it will list all files and directories recursively. If recursive is false or not provided, it will only list the top-level contents.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the directory to list contents for "
            },
            "recursive": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ],
              "description": "Whether to list files recursively. Use 'true' for recursive listing, 'false' or omit for top-level only."
            }
          },
          "required": [
            "path"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--list_code_definition_names",
        "description": "Lists definition names (classes, functions, methods, etc.) used in source code files at the top level of the specified directory. This tool provides insights into the codebase structure and important constructs, encapsulating high-level concepts and relationships that are crucial for understanding the overall architecture.",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the directory  to list top level source code definitions for"
            }
          },
          "required": [
            "path"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--configure_mcp",
        "description": "Configure the settings for a specific MCP tool. This tool allows you to update the configuration of an MCP tool by specifying the server name and the new configuration settings.",
        "parameters": {
          "type": "object",
          "properties": {
            "serverName": {
              "type": "string",
              "description": "The name of the MCP server to configure. do not use the mcp_id"
            },
            "config": {
              "type": "object",
              "properties": {
                "command": {
                  "type": "string",
                  "description": "The command to execute (e.g., 'npx')"
                },
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Array of command arguments"
                }
              },
              "required": [
                "command",
                "args"
              ],
              "description": "The configuration settings for the MCP tool matching the mcp_servers.json format"
            }
          },
          "required": [
            "serverName",
            "config"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--codebase_search",
        "description": "Find snippets of code from the codebase most relevant to the search query. This is a semantic search tool, so the query should ask for something semantically matching what is needed. Use this to discover code patterns, understand implementations, or find specific functionality across the codebase.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to find relevant code. Be specific about what you're looking for."
            },
            "target_directories": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional array of directory paths to limit the search scope. If not provided, the entire codebase will be searched."
            }
          },
          "required": [
            "query"
          ]
        }
      }
    },
    {
      "type": "function",
      "function": {
        "name": "codebolt--attempt_completion",
        "description": "Once you've completed the task, use this tool to present the result to the user. They may respond with feedback if they are not satisfied with the result, which you can use to make improvements and try again.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The CLI command to execute to show a live demo of the result to the user. For example, use 'open index.html' to display a created website. This should be valid for the current operating system. Ensure the command is properly formatted and does not contain any harmful instructions."
            },
            "result": {
              "type": "string",
              "description": "The result of the task. Formulate this result in a way that is final and does not require further input from the user. Don't end your result with questions or offers for further assistance."
            }
          },
          "required": [
            "result"
          ]
        }
      }
    }
  ],
  "max_tokens": 4096,
  "temperature": 0.1,
  "tool_choice": "auto",
  "timestamp": "2025-08-18T13:51:38.801Z",
  "attempt": 1,
  "maxRetries": 3
}